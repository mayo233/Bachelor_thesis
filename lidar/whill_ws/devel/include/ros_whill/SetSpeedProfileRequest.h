// Generated by gencpp from file ros_whill/SetSpeedProfileRequest.msg
// DO NOT EDIT!


#ifndef ROS_WHILL_MESSAGE_SETSPEEDPROFILEREQUEST_H
#define ROS_WHILL_MESSAGE_SETSPEEDPROFILEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_whill/SpeedPack.h>
#include <ros_whill/SpeedPack.h>
#include <ros_whill/SpeedPack.h>

namespace ros_whill
{
template <class ContainerAllocator>
struct SetSpeedProfileRequest_
{
  typedef SetSpeedProfileRequest_<ContainerAllocator> Type;

  SetSpeedProfileRequest_()
    : forward()
    , backward()
    , turn()  {
    }
  SetSpeedProfileRequest_(const ContainerAllocator& _alloc)
    : forward(_alloc)
    , backward(_alloc)
    , turn(_alloc)  {
  (void)_alloc;
    }



   typedef  ::ros_whill::SpeedPack_<ContainerAllocator>  _forward_type;
  _forward_type forward;

   typedef  ::ros_whill::SpeedPack_<ContainerAllocator>  _backward_type;
  _backward_type backward;

   typedef  ::ros_whill::SpeedPack_<ContainerAllocator>  _turn_type;
  _turn_type turn;





  typedef boost::shared_ptr< ::ros_whill::SetSpeedProfileRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_whill::SetSpeedProfileRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetSpeedProfileRequest_

typedef ::ros_whill::SetSpeedProfileRequest_<std::allocator<void> > SetSpeedProfileRequest;

typedef boost::shared_ptr< ::ros_whill::SetSpeedProfileRequest > SetSpeedProfileRequestPtr;
typedef boost::shared_ptr< ::ros_whill::SetSpeedProfileRequest const> SetSpeedProfileRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_whill::SetSpeedProfileRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_whill::SetSpeedProfileRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_whill::SetSpeedProfileRequest_<ContainerAllocator1> & lhs, const ::ros_whill::SetSpeedProfileRequest_<ContainerAllocator2> & rhs)
{
  return lhs.forward == rhs.forward &&
    lhs.backward == rhs.backward &&
    lhs.turn == rhs.turn;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_whill::SetSpeedProfileRequest_<ContainerAllocator1> & lhs, const ::ros_whill::SetSpeedProfileRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_whill

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_whill::SetSpeedProfileRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_whill::SetSpeedProfileRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_whill::SetSpeedProfileRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_whill::SetSpeedProfileRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_whill::SetSpeedProfileRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_whill::SetSpeedProfileRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_whill::SetSpeedProfileRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "199fa9ff7314ba707449d97b2d9d09c3";
  }

  static const char* value(const ::ros_whill::SetSpeedProfileRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x199fa9ff7314ba70ULL;
  static const uint64_t static_value2 = 0x7449d97b2d9d09c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_whill::SetSpeedProfileRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_whill/SetSpeedProfileRequest";
  }

  static const char* value(const ::ros_whill::SetSpeedProfileRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_whill::SetSpeedProfileRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_whill/SpeedPack forward      # m/s(Speed) and m/ss(Acceleration/Deceleration)\n"
"ros_whill/SpeedPack backward     # m/s(Speed) and m/ss(Acceleration/Deceleration)\n"
"ros_whill/SpeedPack turn         # rad/s(Speed) and rad/ss(Acceleration/Deceleration)\n"
"\n"
"\n"
"================================================================================\n"
"MSG: ros_whill/SpeedPack\n"
"float32 speed  # m/s   or rad/s\n"
"float32 acc    # m/ss  or rad/ss\n"
"float32 dec    # m/ss  or rad/ss\n"
;
  }

  static const char* value(const ::ros_whill::SetSpeedProfileRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_whill::SetSpeedProfileRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.forward);
      stream.next(m.backward);
      stream.next(m.turn);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetSpeedProfileRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_whill::SetSpeedProfileRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_whill::SetSpeedProfileRequest_<ContainerAllocator>& v)
  {
    s << indent << "forward: ";
    s << std::endl;
    Printer< ::ros_whill::SpeedPack_<ContainerAllocator> >::stream(s, indent + "  ", v.forward);
    s << indent << "backward: ";
    s << std::endl;
    Printer< ::ros_whill::SpeedPack_<ContainerAllocator> >::stream(s, indent + "  ", v.backward);
    s << indent << "turn: ";
    s << std::endl;
    Printer< ::ros_whill::SpeedPack_<ContainerAllocator> >::stream(s, indent + "  ", v.turn);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_WHILL_MESSAGE_SETSPEEDPROFILEREQUEST_H
